import { EventEmitter } from "events";
import * as vscode from "vscode";
import { type RooCodeAPI, type RooCodeSettings, type RooCodeEvents, type ProviderSettings, type ProviderSettingsEntry } from "@roo-code/types";
import { ClineProvider } from "../core/webview/ClineProvider";
export declare class API extends EventEmitter<RooCodeEvents> implements RooCodeAPI {
    private readonly outputChannel;
    private readonly sidebarProvider;
    private readonly context;
    private readonly ipc?;
    private readonly taskMap;
    private readonly log;
    private logfile?;
    constructor(outputChannel: vscode.OutputChannel, provider: ClineProvider, socketPath?: string, enableLogging?: boolean);
    emit<K extends keyof RooCodeEvents>(eventName: K, ...args: K extends keyof RooCodeEvents ? RooCodeEvents[K] : never): boolean;
    startNewTask({ configuration, text, images, newTab, }: {
        configuration: RooCodeSettings;
        text?: string;
        images?: string[];
        newTab?: boolean;
    }): Promise<string>;
    resumeTask(taskId: string): Promise<void>;
    isTaskInHistory(taskId: string): Promise<boolean>;
    getCurrentTaskStack(): string[];
    clearCurrentTask(lastMessage?: string): Promise<void>;
    cancelCurrentTask(): Promise<void>;
    cancelTask(taskId: string): Promise<void>;
    sendMessage(text?: string, images?: string[]): Promise<void>;
    pressPrimaryButton(): Promise<void>;
    pressSecondaryButton(): Promise<void>;
    isReady(): boolean;
    private registerListeners;
    private outputChannelLog;
    private fileLog;
    getConfiguration(): RooCodeSettings;
    setConfiguration(values: RooCodeSettings): Promise<void>;
    getProfiles(): string[];
    getProfileEntry(name: string): ProviderSettingsEntry | undefined;
    createProfile(name: string, profile?: ProviderSettings, activate?: boolean): Promise<string>;
    updateProfile(name: string, profile: ProviderSettings, activate?: boolean): Promise<string | undefined>;
    upsertProfile(name: string, profile: ProviderSettings, activate?: boolean): Promise<string | undefined>;
    deleteProfile(name: string): Promise<void>;
    getActiveProfile(): string | undefined;
    setActiveProfile(name: string): Promise<string | undefined>;
}
