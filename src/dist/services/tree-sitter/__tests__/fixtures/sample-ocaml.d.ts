export declare const sampleOCaml = "\n(* Module with signature *)\nmodule StringSet : sig\n  type t\n  val empty: t\n  val add: string -> t -> t\n  val mem: string -> t -> bool\nend = struct\n  type t = string list\n  let empty = []\n  let add x s = x :: s\n  let mem = List.mem\nend\n\n(* Functor definition *)\nmodule OrderedMap (Key: sig\n  type t\n  val compare: t -> t -> int\nend) = struct\n  type 'a t = (Key.t * 'a) list\n  let empty = []\n  let add k v map = (k, v) :: map\nend\n\n(* Variant type definition *)\ntype shape =\n  | Rectangle of float * float  (* width * height *)\n  | Circle of float            (* radius *)\n  | Triangle of float * float * float  (* sides *)\n\n(* Record type definition *)\ntype person = {\n  name: string;\n  age: int;\n  address: string option;\n  phone: string list;\n}\n\n(* Pattern matching function *)\nlet rec process_list = function\n  | [] -> None\n  | x :: xs when x > 0 -> Some x\n  | _ :: xs -> process_list xs\n\n(* Multi-argument function *)\nlet calculate_area ~width ~height ?(margin=0) ?(padding=0) () =\n  let total_width = width + (2 * margin) + (2 * padding) in\n  let total_height = height + (2 * margin) + (2 * padding) in\n  total_width * total_height\n\n(* Class definition with inheritance *)\nclass virtual ['a] container = object (self)\n  val mutable items : 'a list = []\n  method virtual add : 'a -> unit\n  method get_items = items\n  method clear = items <- []\nend\n\n(* Object expression *)\nlet make_counter initial = object\n  val mutable count = initial\n  method increment = count <- count + 1\n  method decrement = count <- count - 1\n  method get_count = count\nend\n";
