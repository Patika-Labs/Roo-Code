export declare const samplePythonContent = "\n# NOTE: Some Python constructs are inherently single-line and exempt from the 4-line requirement:\n# - Simple import statements\n# - Global/nonlocal declarations\n# - Simple variable declarations\n\n# Class definition with decorators - demonstrates decorated class structure\n@class_decorator_one\n@class_decorator_two\nclass MultiLineDecoratedClass:\n    \"\"\"\n    Class demonstrating multi-line structure with decorators\n    and docstring spanning multiple lines for clarity\n    \"\"\"\n    def __init__(self, value: int):\n        self.value = value\n\n# Method definition - demonstrates class method structure\nclass MethodContainer:\n    \"\"\"Class containing method definitions\"\"\"\n    \n    def multi_line_method(\n        self,\n        param1: str,\n        param2: int,\n        param3: list[str]\n    ) -> str:\n        \"\"\"Method with multiple parameters and return type\"\"\"\n        result = self._process(param1, param2)\n        return f\"{result}: {param3}\"\n\n# Async function with type annotations and decorators\n@function_decorator_one\n@function_decorator_two\nasync def multi_line_async_function(\n    param1: str,\n    param2: int,\n    param3: list[str]\n) -> None:\n    \"\"\"Async function demonstrating multiple decorators and type hints\"\"\"\n    await async_operation_one(param1)\n    result = await async_operation_two(param2)\n    return await async_operation_three(result, param3)\n\n# Generator function demonstrating yield\ndef multi_line_generator(\n    start: int,\n    end: int,\n    step: int = 1\n) -> int:\n    \"\"\"Generator function demonstrating yield across multiple lines\"\"\"\n    current = start\n    while current < end:\n        yield current\n        current += step\n\n# Lambda with multiple lines using parentheses\nmulti_line_lambda = (\n    lambda x, y, z:\n    x * y + z\n    if x > 0\n    else z\n)\n\n# List comprehension across multiple lines\nmulti_line_comprehension = [\n    x * y + z\n    for x in range(10)\n    for y in range(5)\n    for z in range(3)\n    if x % 2 == 0 and y % 2 == 0\n]\n\n# Complex with statement demonstrating context management\nwith (\n    open('file1.txt', 'r', encoding='utf-8') as f1,\n    open('file2.txt', 'r', encoding='utf-8') as f2,\n    open('file3.txt', 'r', encoding='utf-8') as f3\n):\n    content1 = f1.read().strip()\n    content2 = f2.read().strip()\n    content3 = f3.read().strip()\n\n# Try statement with multiple except blocks\ntry:\n    result = complex_operation_one()\n    intermediate = complex_operation_two(result)\n    final = complex_operation_three(intermediate)\nexcept ValueError as value_error:\n    handle_value_error(value_error)\n    log_error(\"ValueError occurred\", value_error)\nexcept TypeError as type_error:\n    handle_type_error(type_error)\n    log_error(\"TypeError occurred\", type_error)\nfinally:\n    cleanup_operations()\n    log_completion()\n\n# Multi-line import statement (4+ lines)\nfrom typing import (\n    List,\n    Dict,\n    Optional,\n    Union,\n    TypeVar\n)\n\n# Global and nonlocal statements (exempt from 4-line requirement)\ndef scope_demonstration():\n    global global_var_one\n    global global_var_two, global_var_three\n    def inner_function():\n        nonlocal outer_var_one\n        nonlocal outer_var_two, outer_var_three\n        outer_var_one = 1\n\n# Match case statement (Python 3.10+)\ndef multi_line_pattern_match(value: dict):\n    match value:\n        case {\n            \"type\": \"user\",\n            \"name\": str() as name,\n            \"age\": int() as age\n        }:\n            handle_user(name, age)\n        case {\n            \"type\": \"group\",\n            \"members\": list() as members,\n            \"admin\": str() as admin\n        }:\n            handle_group(members, admin)\n        case _:\n            handle_default()\n\n# Complex type annotations\nComplexType = TypeVar('ComplexType')\nmulti_line_type_annotation: dict[\n    str,\n    Union[\n        List[int],\n        Dict[str, bool],\n        Optional[ComplexType]\n    ]\n] = {}\n";
declare const _default: {
    path: string;
    content: string;
};
export default _default;
