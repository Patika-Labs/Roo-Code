declare const _default: "\n; Function definitions and declarations\n(function_definition\n  declarator: (function_declarator\n    declarator: (identifier) @name.definition.function))\n\n(declaration\n  type: (_)?\n  declarator: (function_declarator\n    declarator: (identifier) @name.definition.function\n    parameters: (parameter_list)?)?) @definition.function\n\n(function_declarator\n  declarator: (identifier) @name.definition.function\n  parameters: (parameter_list)?) @definition.function\n\n; Struct definitions\n(struct_specifier\n  name: (type_identifier) @name.definition.struct) @definition.struct\n\n; Union definitions\n(union_specifier\n  name: (type_identifier) @name.definition.union) @definition.union\n\n; Enum definitions\n(enum_specifier\n  name: (type_identifier) @name.definition.enum) @definition.enum\n\n; Typedef declarations\n(type_definition\n  declarator: (type_identifier) @name.definition.type) @definition.type\n\n; Global variables\n(declaration\n  (storage_class_specifier)?\n  type: (_)\n  declarator: (identifier) @name.definition.variable) @definition.variable\n\n(declaration\n  (storage_class_specifier)?\n  type: (_)\n  declarator: (init_declarator\n    declarator: (identifier) @name.definition.variable)) @definition.variable\n\n; Object-like macros\n(preproc_def\n  name: (identifier) @name.definition.macro) @definition.macro\n\n; Function-like macros\n(preproc_function_def\n  name: (identifier) @name.definition.macro) @definition.macro\n";
export default _default;
