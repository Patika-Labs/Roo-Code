declare const _default: "\n; Basic declarations\n(struct_specifier\n  name: (type_identifier) @name.definition.class) @definition.class\n\n(union_specifier\n  name: (type_identifier) @name.definition.class) @definition.class\n\n; Function declarations (prototypes)\n(declaration\n  type: (_)\n  declarator: (function_declarator\n    declarator: (identifier) @name.definition.function)) @definition.function\n\n; Function definitions (with body)\n(function_definition\n  type: (_)\n  declarator: (function_declarator\n    declarator: (identifier) @name.definition.function)) @definition.function\n\n(function_definition\n  declarator: (function_declarator\n    declarator: (field_identifier) @name.definition.method)) @definition.method\n\n(type_definition\n  type: (_)\n  declarator: (type_identifier) @name.definition.type) @definition.type\n\n(class_specifier\n  name: (type_identifier) @name.definition.class) @definition.class\n\n; Enum declarations\n(enum_specifier\n  name: (type_identifier) @name.definition.enum) @definition.enum\n\n; Namespace definitions\n(namespace_definition\n  name: (namespace_identifier) @name.definition.namespace) @definition.namespace\n\n(namespace_definition\n  body: (declaration_list\n    (namespace_definition\n      name: (namespace_identifier) @name.definition.namespace))) @definition.namespace\n\n; Template declarations\n(template_declaration\n  parameters: (template_parameter_list)\n  (class_specifier\n    name: (type_identifier) @name.definition.template.class)) @definition.template\n\n; Macro definitions\n(preproc_function_def\n  name: (identifier) @name.definition.macro) @definition.macro\n\n; Variable declarations with initialization\n(declaration\n  type: (_)\n  declarator: (init_declarator\n    declarator: (identifier) @name.definition.variable)) @definition.variable\n\n; Constructor declarations\n(function_definition\n  declarator: (function_declarator\n    declarator: (identifier) @name.definition.constructor)) @definition.constructor\n\n; Destructor declarations\n(function_definition\n  declarator: (function_declarator\n    declarator: (destructor_name) @name.definition.destructor)) @definition.destructor\n\n; Operator overloads\n(function_definition\n  declarator: (function_declarator\n    declarator: (operator_name) @name.definition.operator)) @definition.operator\n\n; Friend declarations\n(friend_declaration) @definition.friend\n\n; Using declarations\n(using_declaration) @definition.using\n";
export default _default;
