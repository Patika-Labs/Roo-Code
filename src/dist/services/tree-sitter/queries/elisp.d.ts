export declare const elispQuery = "\n; Function definitions - capture only name and actual function node\n((function_definition\n  name: (symbol) @name.definition.function) @_func\n  (#match? @name.definition.function \"^[^;]\"))\n\n; Macro definitions - capture only name and actual macro node\n((macro_definition\n  name: (symbol) @name.definition.macro) @_macro\n  (#match? @name.definition.macro \"^[^;]\"))\n\n; Custom forms - match defcustom specifically and avoid comments\n((list\n  . (symbol) @_def\n  . (symbol) @name.definition.custom) @_custom\n  (#eq? @_def \"defcustom\")\n  (#match? @name.definition.custom \"^[^;]\"))\n\n; Face definitions - match defface specifically and avoid comments\n((list\n  . (symbol) @_def\n  . (symbol) @name.definition.face) @_face\n  (#eq? @_def \"defface\")\n  (#match? @name.definition.face \"^[^;]\"))\n\n; Group definitions - match defgroup specifically and avoid comments\n((list\n  . (symbol) @_def\n  . (symbol) @name.definition.group) @_group\n  (#eq? @_def \"defgroup\")\n  (#match? @name.definition.group \"^[^;]\"))\n\n; Advice definitions - match defadvice specifically and avoid comments\n((list\n  . (symbol) @_def\n  . (symbol) @name.definition.advice) @_advice\n  (#eq? @_def \"defadvice\")\n  (#match? @name.definition.advice \"^[^;]\"))\n";
