declare const _default: "\n; Class definitions (including decorated)\n(class_definition\n  name: (identifier) @name.definition.class) @definition.class\n\n(decorated_definition\n  definition: (class_definition\n    name: (identifier) @name.definition.class)) @definition.class\n\n; Function and method definitions (including async and decorated)\n(function_definition\n  name: (identifier) @name.definition.function) @definition.function\n\n(decorated_definition\n  definition: (function_definition\n    name: (identifier) @name.definition.function)) @definition.function\n\n; Lambda expressions\n(expression_statement\n  (assignment\n    left: (identifier) @name.definition.lambda\n    right: (parenthesized_expression\n      (lambda)))) @definition.lambda\n\n; Generator functions (functions containing yield)\n(function_definition\n  name: (identifier) @name.definition.generator\n  body: (block\n    (expression_statement\n      (yield)))) @definition.generator\n\n; Comprehensions\n(expression_statement\n  (assignment\n    left: (identifier) @name.definition.comprehension\n    right: [\n      (list_comprehension)\n      (dictionary_comprehension)\n      (set_comprehension)\n    ])) @definition.comprehension\n\n; With statements\n(with_statement) @definition.with_statement\n\n; Try statements\n(try_statement) @definition.try_statement\n\n; Import statements\n(import_from_statement) @definition.import\n(import_statement) @definition.import\n\n; Global/Nonlocal statements\n(function_definition\n  body: (block\n    [(global_statement) (nonlocal_statement)])) @definition.scope\n\n; Match case statements\n(function_definition\n  body: (block\n    (match_statement))) @definition.match_case\n\n; Type annotations\n(typed_parameter\n  type: (type)) @definition.type_annotation\n\n(expression_statement\n  (assignment\n    left: (identifier) @name.definition.type\n    type: (type))) @definition.type_annotation\n";
export default _default;
