declare const _default: "\n; Class declarations - captures standard, final, and open classes\n(class_declaration\n  name: (type_identifier) @name) @definition.class\n\n; Protocol declarations - captures protocols with requirements\n(protocol_declaration\n  name: (type_identifier) @name) @definition.interface\n\n; Method declarations in classes/structs/enums/extensions\n(function_declaration\n  name: (simple_identifier) @name) @definition.method\n\n; Static/class method declarations\n(function_declaration\n  (modifiers\n    (property_modifier))\n  name: (simple_identifier) @name) @definition.static_method\n\n; Initializers - captures designated initializers\n(init_declaration\n  \"init\" @name) @definition.initializer\n\n; Convenience initializers\n(init_declaration\n  (modifiers (member_modifier))\n  \"init\" @name) @definition.convenience_initializer\n\n; Deinitializers\n(deinit_declaration\n  \"deinit\" @name) @definition.deinitializer\n\n; Subscript declarations\n(subscript_declaration\n  (parameter) @name) @definition.subscript\n\n; Property declarations - captures stored properties\n(property_declaration\n  (pattern) @name) @definition.property\n\n; Computed property declarations with accessors\n(property_declaration\n  (pattern)\n  (computed_property)) @definition.computed_property\n\n; Type aliases\n(typealias_declaration\n  name: (type_identifier) @name) @definition.type_alias\n\n; Protocol property requirements\n(protocol_property_declaration\n  name: (pattern) @name) @definition.protocol_property\n\n; Protocol method requirements\n(protocol_function_declaration\n  name: (simple_identifier) @name) @definition.protocol_method\n";
export default _default;
