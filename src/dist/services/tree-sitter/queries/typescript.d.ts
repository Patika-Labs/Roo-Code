declare const _default: "\n(function_signature\n  name: (identifier) @name.definition.function) @definition.function\n\n(method_signature\n  name: (property_identifier) @name.definition.method) @definition.method\n\n(abstract_method_signature\n  name: (property_identifier) @name.definition.method) @definition.method\n\n(abstract_class_declaration\n  name: (type_identifier) @name.definition.class) @definition.class\n\n(module\n  name: (identifier) @name.definition.module) @definition.module\n\n(function_declaration\n  name: (identifier) @name.definition.function) @definition.function\n\n(method_definition\n  name: (property_identifier) @name.definition.method) @definition.method\n\n(class_declaration\n  name: (type_identifier) @name.definition.class) @definition.class\n\n(call_expression\n  function: (identifier) @func_name\n  arguments: (arguments\n    (string) @name\n    [(arrow_function) (function_expression)]) @definition.test)\n  (#match? @func_name \"^(describe|test|it)$\")\n\n(assignment_expression\n  left: (member_expression\n    object: (identifier) @obj\n    property: (property_identifier) @prop)\n  right: [(arrow_function) (function_expression)]) @definition.test\n  (#eq? @obj \"exports\")\n  (#eq? @prop \"test\")\n(arrow_function) @definition.lambda\n\n; Switch statements and case clauses\n(switch_statement) @definition.switch\n\n; Individual case clauses with their blocks\n(switch_case) @definition.case\n\n; Default clause\n(switch_default) @definition.default\n\n; Enum declarations\n(enum_declaration\n  name: (identifier) @name.definition.enum) @definition.enum\n\n; Decorator definitions with decorated class\n(export_statement\n  decorator: (decorator\n    (call_expression\n      function: (identifier) @name.definition.decorator))\n  declaration: (class_declaration\n    name: (type_identifier) @name.definition.decorated_class)) @definition.decorated_class\n\n; Explicitly capture class name in decorated class\n(class_declaration\n  name: (type_identifier) @name.definition.class) @definition.class\n\n; Namespace declarations\n(internal_module\n  name: (identifier) @name.definition.namespace) @definition.namespace\n\n; Interface declarations with generic type parameters and constraints\n(interface_declaration\n  name: (type_identifier) @name.definition.interface\n  type_parameters: (type_parameters)?) @definition.interface\n\n; Type alias declarations with generic type parameters and constraints\n(type_alias_declaration\n  name: (type_identifier) @name.definition.type\n  type_parameters: (type_parameters)?) @definition.type\n\n; Utility Types\n(type_alias_declaration\n  name: (type_identifier) @name.definition.utility_type) @definition.utility_type\n\n; Class Members and Properties\n(public_field_definition\n  name: (property_identifier) @name.definition.property) @definition.property\n\n; Constructor\n(method_definition\n  name: (property_identifier) @name.definition.constructor\n  (#eq? @name.definition.constructor \"constructor\")) @definition.constructor\n\n; Getter/Setter Methods\n(method_definition\n  name: (property_identifier) @name.definition.accessor) @definition.accessor\n\n; Async Functions\n(function_declaration\n  name: (identifier) @name.definition.async_function) @definition.async_function\n\n; Async Arrow Functions\n(variable_declaration\n  (variable_declarator\n    name: (identifier) @name.definition.async_arrow\n    value: (arrow_function))) @definition.async_arrow\n";
export default _default;
